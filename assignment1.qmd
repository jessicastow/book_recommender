---
title: "Assignment 1: Recommender Systems"
author: "Jessica Stow (STWJES003@MYUCT.AC.ZA)"
date: "September 2024"
format: 
  html: 
    fig-width: 8
    fig-height: 4
    code-fold: true
---

# View this report on my GitHub profile!

This report's repository can be viewed on [my GitHub profile](https://github.com/jessicastow/book_recommender).

# Plagiarism declaration

-   I know that plagiarism is wrong.

-   Plagiarism is to use another’s work and pretend that it is one’s own.

-   I have used the required convention for citation and referencing.

-   Each contribution to and quotation in this assignment from the work(s) of other people has been attributed, and has been cited and referenced.

-   This assignment is my own work.

-   I have not allowed, and will not allow, anyone to copy my work with the intention of passing it off as his or her own work.

-   I acknowledge that copying someone else’s assignment or essay, or part of it, is wrong, and declare that this is my own work.

# Objectives

The objectives of this report were as follows:

1\. Build recommender systems that predict the rating a user will give to a book based on each of:

a\) item-based collaborative filtering,

b\) user-based collaborative filtering, and

c\) matrix factorisation.

2\. Assessment and ensemble model:

a\) Assess the accuracy of the matrix factorisation recommender system, using a single train/test sample.

b\) Assess the accuracy of the matrix factorisation recommender system with and without regularisation.

c\) Create a final model that ensembles the predictions from the three approaches, and then assess the accuracy of the ensemble predictions.

# Introduction to Data Mining and Recommender Systems

Recommender systems utilise data mining techniques to offer personalised suggestions by analysing patterns in user preferences and behaviours (Data Mining: Concepts and Techniques, 2012). The collaborative filtering approach specifically focuses on identifying users with similar tastes or preferences, recommending items based on the opinions and actions of those with shared interests. This method may also take into account a user’s social environment to enhance the relevance of the recommendations.

## Cosine Similarity

Cosine similarity is a metric used in both user-based and item-based collaborative filtering to measure how similar two vectors are.

Given two vectors, $\boldsymbol x$ and $\boldsymbol y$, the cosine similarity is defined as:

$$cos(\theta) = \frac{\boldsymbol x \cdot \boldsymbol y}{||\boldsymbol x|| \ ||\boldsymbol y||} = \frac{\sum_{i=1}^{n}x_iy_i}{\sqrt{\sum_{i=1}^{n}x^2_i} \sqrt{\sum_{i=1}^{n}y^2_i}}$$

Cosine similarity ranges from 0 to 1, with higher values indicating greater similarity. As two vectors become more aligned, the angle between them decreases, and the cosine similarity approaches 1, reflecting highly similar user preferences. Conversely, a larger angle results in a cosine similarity closer to 0, indicating that the preferences are very different.

## User-Based Collaborative Filtering

User-Based Collaborative Filtering accounts for a user's interests by identifying similar users and recommending items that those users have shown interest in (Grus, 2015).

To get an idea of how similar two users are we need to use the cosine similarity metric, which quantifies how alike any two users are based on their preference vectors.

## Item-Based Collaborative Filtering

Item-based collaborative filtering (IBCF) takes an alternative approach by computing similarities between items, rather than users. Recommendations are then generated for each user by aggregating items that are similar to the ones the user has shown interest in (Grus, 2015).

Cosine similarity is again used to calculate similarity. If two items are of interest to the same users, their similarity will be closer to 1. If no users show interest in both items, their similarity will be closer to 0. Recommendations are generated by summing the similarities of items related to the user's current interests.

## Collaborative filtering with matrix factorisation

Matrix factorisation offers a different approach to collaborative filtering, rooted in linear algebra, where the goal is to fill in missing values within a matrix. Also known as matrix decomposition, it involves representing a matrix as the product of two smaller matrices. The key concept behind this method is the discovery of **latent factors** — hidden features that capture meaningful patterns in the data.

In recommendation systems, matrix factorisation decomposes the user-item ratings matrix into two smaller matrices in such a way that the known ratings are closely approximated. A key advantage of this approach is that, while the original ratings matrix is incomplete (with missing entries), the decomposed matrices are fully populated. This allows for predicting the missing values in the original matrix, effectively filling in the blanks and making recommendations based on the latent factors derived from the data.

# Data description

The dataset used in this report was obtained from [Kaggle's freely available Book Recommendation Dataset](https://www.kaggle.com/datasets/arashnic/book-recommendation-dataset/). The data was collected by Cai-Nicolas Ziegler in a four-week-long crawl between August and September 2004 from the [Book-Crossing community](https://www.bookcrossing.com/) with kind permission from Ron Hornbaker, CTO of Humankind Systems. It contains 278 858 users (anonymised, but with demographic information) providing over 1 million ratings (explicit/implicit) about 271 379 books.

The dataset consists of three files:

1\. **Users:** which contains the user information:

`User.ID`: the unique, anonymised user identifier.

`Location`: the location of the user (in the format of city, state, country).

`Age`: the age of the user.

2\. **Books:** which contains the book and content based information (which have been obtained from Amazon Web Services):

`ISBN`: the unique identifier for each book.

`Book.Title`: the book title.

`Book.Author`: the book author (in the case of several authors, only the first is provided).

`Year.Of.Publication`: the year of publication.

`Publisher`: the publisher of the book.

`Image-URL-S`, `Image-URL-M`, and `Image-URL-L`: URLs linking to cover images of the books in size small, medium and large, respectively. These URLs point to the Amazon web site.

3\. **Ratings:** which contains the book rating information:

`User.ID`: the unique user id of the user rating the book.

`ISBN`: the ISBN (identifier) of the book rated.

`Book.Rating`: the rating given by the user. These ratings are either explicit (expressed on a scale of 1-10 where higher values indicated higher appreciation), or implicit, expressed by 0.

# Exploratory data analysis

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE,
                      error = FALSE,
                      include = FALSE,
                      warning = FALSE)
```

```{r}
# Load libraries
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(DT)
library(keras)
library(recosystem)
library(Matrix)
library(proxyC)
```

There were no duplicate entries found in any of the datasets.

The `Books` dataset contains information for 271 360 books, with all of these books being unique based on their ISBN.

The `Users` dataset contains information for 278 858 users, with all of these users being unique based on their user IDs.

The `Ratings` dataset contains information for 1 149 780 ratings. For this dataset we found that 105 283 unique users gave ratings (both explicit and implicit), this accounts for approximately 38% of the total user base. Interestingly, these users rated 340 556 books, which exceeds the number of books listed in the `Books` dataset.

```{r}
# read in data
books <- read.csv("data/Books.csv")
ratings <- read.csv("data/Ratings.csv")
users <- read.csv('data/Users.csv')

# BOOKS -----------------------------------------------------------------------
# are all books unique?
nrow(books) # 271 360 books
length(unique(books$ISBN)) # 271 360 books 
nrow(books) == length(unique(books$ISBN)) # YES
sum(duplicated(books)) # no duplicates as expected

# USERS -----------------------------------------------------------------------
# are all users unique?
nrow(users) # 278 858 users
length(unique(users$User.ID)) # 278 858 users
nrow(users) == length(unique(users$User.ID)) # YES
sum(duplicated(users)) # no duplicates as expected



# RATINGS ----------------------------------------------------------------------
# how many ratings?
nrow(ratings) # 1 149 780 ratings
sum(duplicated(ratings)) # no duplicates
# how many users gave ratings?
length(unique(ratings$User.ID)) # 105 283

# what percentage of users gave ratings?
round(length(unique(ratings$User.ID))/length(unique(users$User.ID))*100) # ~38%

# how many books were rated?
length(unique(ratings$ISBN)) # 340 556
```

## Univariate analysis

We decided to investigate the following variables: user age and book ratings.

We chose not to explore user location or additional book details, as they were not relevant to the objectives of this recommender system exercise.

### User Age

User ages ranged from 0 to 244 years, with a mean of 35 and a median of 32. This range presents significant issues, as it's unrealistic for users to be 0 or 244 years old. These outliers likely result from data entry errors. Excluding these extreme values reveals that the age distribution is generally symmetrical and uniform.

```{r include=TRUE}
# USERS -----------------------------------------------------------------------
# what is the spread of user ages?
min(users$Age, na.rm = TRUE) # minimum age = 0 
mean(users$Age, na.rm = TRUE) # mean age 35 years
median(users$Age, na.rm = TRUE) # 32 
max(users$Age, na.rm = TRUE) # max age 244

# Visualise the range of 'Age' using a boxplot
boxplot(users$Age, 
        main = "Figure 1: Boxplot of User Age", 
        ylab = "Age", 
        col = "lightgreen", 
        horizontal = TRUE)

```

### Book ratings

Book ratings ranged from 0 to 10. A rating of 0 indicated an implicit interaction, meaning the user may have read or interacted with the book but did not explicitly rate it. Ratings from 1 to 10 were explicit, representing direct user input. As shown in *Figure 2* below, the majority of ratings were implicit, which will be less useful for our recommender system moving forward.

```{r include=TRUE}
# RATINGS -----------------------------------------------------------------------
# what is the spread of the ratings variable?
min(ratings$Book.Rating, na.rm = TRUE) # minimum rating = 0 
mean(ratings$Book.Rating, na.rm = TRUE) # mean age 35 years
median(ratings$Book.Rating, na.rm = TRUE) # 32 
max(ratings$Book.Rating, na.rm = TRUE) # max rating = 10

# Visualise the range of 'rating' using a histogram
hist(ratings$Book.Rating, 
     breaks = 11, 
     main = "Figure 2: Distribution of Book rating", 
     xlab = "Book rating",
     col = "lightblue", 
     border = "black",
     xaxt = "n")

# Add custom x-axis with labels from 0 to 10
axis(1, at = 0:10, labels = 0:10)
```

## Bivariate analysis

### Ratings by user

We observed that one user (ID 11676) rated an impressive 13 607 books, which is significantly higher than the average of just 10 book ratings per user. When we investigated this user we noted that there is no location or age information available for them

```{r}
# which users rated the most books?

# Group by User ID and count the number of ratings
user_ratings_count <- ratings %>%
  group_by(User.ID) %>%
  summarise(rating_count = n()) %>%
  arrange(desc(rating_count))

# View the top user who rated the most books
head(user_ratings_count, 1)

# investigate this user
users[users$User.ID == '11676', ]

# average ratings per user
mean(user_ratings_count$rating_count)
```

### Ratings by book

The most rated book was "Wild Animus" by Rich Shapero, published in 2004, which received a total of 2502 ratings.

```{r}
# which book got the most ratings?

# Group by ISBN and count the number of ratings for each book
book_ratings_count <- ratings %>%
  group_by(ISBN) %>%
  summarise(rating_count = n()) %>%
  arrange(desc(rating_count))

# View the book that received the most ratings
head(book_ratings_count, 1)

# which book was this?
books[books$ISBN == '0971880107', ]
```

Several books had an average rating of 10, though in many cases these ratings were based on input from only a single user.

```{r}
# which book got the highest rating?

# Group by ISBN and calculate the mean rating for each book
book_avg_ratings <- ratings %>%
  group_by(ISBN) %>%
  summarise(average_rating = mean(Book.Rating, na.rm = TRUE), 
            rating_count = n()) %>%
  arrange(desc(average_rating))

# View the top 10 books with the highest average ratings
head(book_avg_ratings, 10)

```

# Methods

## Data manipulation

### Ratings

We decided to drop the implicit ratings (ratings equal to 0) as these are not useful in the building of our recommender model. We also chose to only keep books with 5 or more ratings to exclude books that are rarely read.

```{r}
ratings <- ratings %>%
  filter(Book.Rating != 0) %>% # Book ratings of zero imply the user did not rate the book, drop rows where rating = 0 
  group_by(ISBN) %>%
  filter(n() > 4) %>% # only keep books with 5 or more ratings
  ungroup()

nrow(ratings) # 199 477 rows, therefore 950 303 rows (83% of the data) dropped
```

We also chose to retain user ratings only for those who had rated 10 or more books (i.e., users who rated at least the average number of books). This approach ensures that we focus on active readers, providing a more reliable understanding of their preferences. These filtering methods resulted in a ratings data frame with 111 008 rows, meaning 1 038 772 observations (\~90% of our ratings data) was dropped.

```{r}
# only keep ratings when users have rated 10 or more books
ratings <- ratings %>%
  group_by(User.ID) %>%
  filter(n() >= 10) %>%
  ungroup()
```

### Users

We decided to only investigate the user preferences of young adults between the ages of 18 and 25 (inclusive). All other ages were dropped from the data frame. We also decided to exclude the user location information as this was not helpful to our recommender model building.

```{r}
users <- users %>%
  filter(Age >= 18 & Age <= 25) %>% # only keep users between 18 and 25 years old
  select(-Location)
```

### Books

We ensured that all books had a title. We then investigated the instances where the Year of Publication contained non-numeric values, as this would prevent converting the column to an integer. We found that for three books, the Book Author and Year of Publication fields had been mistakenly swapped. To address this, we implemented a solution to correct the swapped information. We then turned the year of publication column into a type integer.

We kept the ISBN, book title, author and year of publication information and dropped the publisher and image URLs from the `books` data frame.

```{r}
sum(is.na(books$Book.Title)) # all books have a title

# identify the cases where the year is not numeric
non_numeric_year <- books[is.na(as.numeric(as.character(books$Year.Of.Publication))), ]

# Swap the 'Book.Author' and 'Year.Of.Publication' values for these rows
books$Year.Of.Publication[is.na(as.numeric(as.character(books$Year.Of.Publication)))] <- non_numeric_year$Book.Author
books$Book.Author[is.na(as.numeric(as.character(books$Year.Of.Publication)))] <- non_numeric_year$Year.Of.Publication

colnames(books)
books <- books %>%  
  mutate(Year.Of.Publication = as.integer(Year.Of.Publication)) %>% # make year of publication an integer
  select(c(ISBN, Book.Title, Book.Author, Year.Of.Publication, # keep these variables
           -Publisher, -Image.URL.S, -Image.URL.M, -Image.URL.L)) # drop these variables
```

### Joining of data frames

The `Books` data frame was merged with the `Ratings` data frame using a left join on the common variable`ISBN`. This ensured that all the ratings information was retained while adding the corresponding book titles and authors to the data set.

To address the earlier discrepancy where more books were rated than were listed in the `Books` data frame, we checked for any missing book titles. We found that 7 249 ratings lacked corresponding book titles or any other associated information. As a result, we opted to remove these ratings from the data frame.

```{r}
# left join books to ratings df and rename it "ratings_books"
ratings_books <- ratings %>%
  left_join(books, by = "ISBN") %>%
  arrange(User.ID) # order by user ID

sum(is.na(ratings_books$Book.Title)) # 7249 ratings without book info

# Remove rows where Book.Title is NA
ratings_books <- ratings_books %>% 
  filter(!is.na(Book.Title))
```

We then merged the user information into the new data frame using a left join, matching on the shared user IDs. The left join was chosen to ensure that all data related to the books and their ratings remained intact. We then noted that we now had 97 202 ratings without age information which had to be dropped.

```{r}
ratings_books_users <- ratings_books %>%
  left_join(users, by = "User.ID")

sum(is.na(ratings_books_users$Age)) # 97202 ratings without age info

# Remove rows where Age is NA
ratings_books_users <- ratings_books_users %>% 
  filter(!is.na(Age))
```

The final merged data frame contained the following variables: the book's ISBN, title, author, year of publication, the user's rating, and their age. It comprised 10 768 ratings, and the first 50 can be viewed by exploring the data table below.

```{r}
nrow(ratings_books_users) # 10768
colnames(ratings_books_users)
```

```{r include=TRUE}
datatable(
  head(ratings_books_users, 50), 
  rownames = FALSE,
  options = list(dom = "tip", pageLength = 5)
)
```

## Collaborative filtering with matrix factorisation

Matrix factorisation was implemented using the `recosystem` package. To prepare the data in the required format, we structured the ratings dataset so that each row represented a unique rating, with columns for the user ID, book ISBN, book title, and rating score. It was necessary to convert both the user IDs and book ISBNs into factors, as the matrix factorisation model in recosystem relies on categorical encoding of users and items. This step ensured that the model could properly identify and differentiate between users and books.

```{r}
# in order to do matrix factorisation we need to make the user IDs and ISBNs as factors
mf <- ratings_books_users %>%
  select(User.ID, ISBN, Book.Title, Book.Rating) %>%
  mutate(User.ID = as.factor(User.ID)) %>%
  mutate(Book.Title = as.factor(ISBN)) 
```

After preparing the data, we initialised a matrix factorisation model using the `recosystem` package by creating an instance of the Reco() object. This object serves as the model that will be trained on our data to learn user-item interactions.

```{r}
# Initialise the recosystem object
r <- Reco()
```

Next, we split the data into training and test sets to evaluate the model’s performance. We used an 80/20 split, where 80% of the data was randomly selected for training and the remaining 20% was used for testing. To ensure reproducibility (so that the same random split can be generated each time the code is run), we set a random seed.

```{r}
# Create train and test sets 
set.seed(123)  # For reproducibility
train_indices <- sample(nrow(mf), size = 0.8 * nrow(mf))
train_set <- mf[train_indices, ]
test_set <- mf[-train_indices, ]
```

To use the `recosystem` package for matrix factorisation, we need to convert the training and testing data into a format that the package can process. This is done by using the `data_memory()` function, which transforms the data into memory-efficient objects that `recosystem` can work with.

**For the training data:**

-   We specify the `user_index` (the user ID), `item_index` (the ISBN for each book), and the rating (the actual rating given by the user).

-   This creates a memory-based data object that links users, books, and ratings, which will be used to train the model.

**For the testing data:**

-   A similar process is applied, but with the test set. The `user_index` and `item_index` are specified along with the rating, allowing us to evaluate the model's performance on unseen data.

We then performed collaborative filtering with matrix factorisation both with and without a regularisation term.

### Without regularisation term

The matrix factorisation model is trained on the training set using the `train()` function from the `recosystem` package. Without specifying a regularisation term, the model relies purely on learning latent factors for users and items without penalising large or complex factor values. This can lead to overfitting, especially with sparse data, because the model may fit the training data too closely, capturing noise rather than generalisable patterns.

After the training phase, predictions were made on the test set using the `predict()` function. The predicted ratings were stored for later evaluation. Since there was no regularisation, the model might perform well on the training set but could struggle to generalise to new, unseen data in the test set, potentially leading to poorer predictive accuracy.

```{r}
# Train the model on the training set
r$train(train_data)

# Predict on the test set
test_set$MF_pred <- r$predict(test_data)
```

### With regularisation term

To enhance the performance of matrix factorisation in collaborative filtering, we introduced L2 regularisation. L2 regularisation adds a penalty term to the loss function, discouraging large parameter values. This helps prevent overfitting, especially in sparse datasets, which is common in recommendation systems. In the `recosystem` package, L2 regularisation is applied to both user and item latent factors by setting `costp_l2` and `costq_l2` during model training. These parameters control the strength of regularisation for the user and item factors, respectively.

We conducted a grid search to find the optimal combination of `costp_l2` and `costq_l2` values that would yield the lowest RMSE score for our predictions.

The following values were tested:

- `costp_l2`: 0.001, 0.01, 0.1, 0.5, 0.6, 0.8, 1

- `costq_l2`: 0.001, 0.01, 0.1, 0.5, 0.6, 0.8, 1

This approach allowed us to identify the best regularisation settings to improve prediction accuracy and prevent overfitting.

```{r}
# Define the grid search parameters
costp_l2_values <- c(0.001, 0.01, 0.1, 0.5, 0.6, 0.8, 1)
costq_l2_values <- c(0.001, 0.01, 0.1, 0.5, 0.6, 0.8, 1)

# Create a dataframe to store the results
results <- data.frame(costp_l2 = numeric(),
                      costq_l2 = numeric(),
                      rmse = numeric())

# Loop over the different combinations of costp_l2 and costq_l2
for (costp_l2 in costp_l2_values) {
  for (costq_l2 in costq_l2_values) {
    # Train the model with the current combination of hyperparameters
    r$train(train_data, opts = list(costp_l2 = costp_l2, costq_l2 = costq_l2, niter = 20))
    
    # Predict on the test set
    test_set$MF_pred <- r$predict(test_data)
    
    # Calculate the Root Mean Square Error (RMSE)
    rmse <- sqrt(mean((test_set$MF_pred - test_set$Book.Rating)^2, na.rm = TRUE))
    
    # Store the results
    results <- rbind(results, data.frame(costp_l2 = costp_l2, costq_l2 = costq_l2, rmse = rmse))
    
    # Print the current combination and its RMSE
    print(paste("costp_l2:", costp_l2, "costq_l2:", costq_l2, "RMSE:", rmse))
  }
}
```

The best combination of hyperparameters were a `costp_l2` of 0.5 and a `costq_l2` of 0.1, which resulted in a RMSE of 1.803844. 

```{r}
# Find the best hyperparameters
best_params <- results[which.min(results$rmse), ]
print(best_params)
```

This combination was selected for the final model with L2 regularisation to generate predictions.

```{r}
r$train(train_data, opts = list(
  costp_l2 = 0.5,  # Regularisation for user factors
  costq_l2 = 0.001))  # Regularisation for item factors

# Predict on the test set
test_set$MF_pred_L2 <- r$predict(test_data)
```

## User-Based Collaborative Filtering

To calculate user similarities, we first converted our ratings matrix into a wide format, where each row represented a user (User.ID) and each column represented a book (ISBN).

Recognising that users have different rating habits, with some users rating consistently higher or lower than others, we applied mean-centering to standardise the data. Without this normalisation, users with similar preferences might appear dissimilar due to these differences in rating styles. By using mean-centering, we adjusted the ratings to reflect how much a user liked or disliked a book **relative to their own average**. This prepared the data for computing the users' cosine similarity, ensuring that it captured users’ true preferences and enabled more accurate recommendations.

```{r}
# transform ratings matrix into wide format 
ratings_wide <- ratings_books_users %>%
   select(User.ID, ISBN, Book.Rating) %>%
   complete(User.ID, ISBN) %>%
   pivot_wider(names_from = ISBN, values_from = Book.Rating)

# extract user names to use for row names in ratings_wide matrix
sorted_my_users <- as.character(unlist(ratings_wide[, 1]))

# Compute the mean rating for each user
user_means <- rowMeans(ratings_wide[,-1], na.rm = TRUE)

# create a user means dictionary
user_means_dict <- setNames(user_means, sorted_my_users)

# Subtract the mean rating from each user's ratings (mean-centering)
ratings_wide <- sweep(ratings_wide[,-1], 1, user_means, FUN = "-")

# convert to matrix 
ratings_wide <- as.matrix(ratings_wide)

# assign user IDs to row names of matrix
row.names(ratings_wide) <- sorted_my_users
```

We replaced any `NA` values, representing missing ratings for a given book, with zero. This step was necessary because cosine similarity cannot handle missing values. The matrix was then converted into a sparse format, which is more computationally efficient when working with matrices that contain a large number of zero values.

```{r}
# Replace NAs with 0, since cosine similarity doesn't handle NAs directly
ratings_wide[is.na(ratings_wide)] <- 0

# Convert the matrix to a sparse matrix
# sparse matrices are computationally faster when dealing with matrices with lots of 0s
ratings_wide_sparse <- Matrix(ratings_wide, sparse = TRUE)
```

Finally, we calculated cosine similarities between users based on their book ratings using the `simil()` function from the `proxyC` package, which is well-suited for efficiently handling sparse matrices. The user similarities sparse matrix was converted to a dense matrix, to allow for easy computation and predictions later.

```{r}
# Compute cosine similarity between users based on ratings given to books
# using proxyC which deals well with sparse matrices
user_similarities <- simil(ratings_wide_sparse, method = "cosine")

# Convert the result to a dense matrix
user_similarities <- as.matrix(user_similarities)

# View the first few rows and columns
user_similarities[1:5, 1:5]
```

### Predictions

To assess the model's predictions, we chose to make predictions on the same test set used in the collaborative filtering model with matrix factorisation. We created a function to calculate the user-based predicted rating, while adjusting for each user's average rating.

In the function, we first retrieve the cosine similarity scores for the target user and standardise them so they sum to one, but only across users who have rated the specific book. The predicted rating for the book is then calculated as a weighted sum of the ratings given by other users, with the weights being the standardised similarity scores. Finally, the predicted rating is adjusted by adding the user’s average rating to bring it back to the original scale.

This approach ensured that both user similarities and individual rating tendencies are considered when making predictions.

```{r}
# Define a function to calculate the user-based predicted rating with user mean adjustment
ub_predict_rating <- function(user_id, isbn, ratings_wide, user_similarities, user_means_dict) {
  # Get the similarities for the current user
  stdW <- user_similarities[user_id, ] * !is.na(ratings_wide[, isbn]) # only for users that have rated that book
  
  # Normalise the similarities (to ensure they sum to 1)
  stdW <- stdW / sum(stdW, na.rm = TRUE)
  
  # Calculate the predicted rating using weighted sum
  ub_rating <- sum(ratings_wide[, isbn] * stdW, na.rm = TRUE) 
  
  # Add the user's mean rating to the predicted rating
  ub_rating_adjusted <- ub_rating + user_means_dict[user_id]
  
  return(ub_rating_adjusted)
}
```

We then applied the function across the same test used in the collaborative filtering with matrix factorisation model.

```{r}
# Apply the function across the test set dataframe
test_set$UB_pred <- mapply(ub_predict_rating, 
                           test_set$User.ID, 
                           test_set$ISBN, 
                           MoreArgs = list(ratings_wide = ratings_wide, 
                                           user_similarities = user_similarities, 
                                           user_means_dict = user_means_dict))

```

## Item-Based Collaborative Filtering

First we need to compute the similarities between all pairs of book. We can reuse the same code we used to compute user similarities, if we first transpose the books matrix.

```{r}
# transpose the matrix

books_user <- ratings_wide

books_user_matrix <- as.matrix(books_user)

# Replace NAs with 0, as cosine similarity doesn't handle NAs directly
books_user_matrix[is.na(books_user_matrix)] <- 0

# Convert the matrix to a sparse matrix
books_user_matrix_sparse <- Matrix(books_user_matrix, sparse = TRUE)

# Assuming ratings_matrix_sparse is a sparse matrix (of class dgCMatrix)

# Compute cosine similarity using proxyC
item_similarities <- simil(books_user_matrix_sparse, method = "cosine")

# This should be faster than using a dense matrix

# Convert the result to a dense matrix if needed
item_similarities <- as.matrix(item_similarities)

# View the first few rows and columns
item_similarities[1:5, 1:5]
```

```{r}
# make predictions
```

## Ensemble model

As our last model we built an ensemble model which averages the predictions from the user-based, item-based and the matrix factorisation model (with regularisation). 

```{r}
test_set$ensemble_pred <- (test_set$MF_pred + test_set$UB_pred)/2 # add the IB model
```


# Results

## Accuracy assessment

### Collaborative filtering with matrix factorisation model - Without regularisation term

```{r}
# Assess CF MF model using MSE & RMSE
# Calculate MSE
mse_MF <- mean((test_set$Book.Rating - test_set$MF_pred)^2)
print(mse_MF) # 3.39176

# Calculate RMSE
rmse_MF <- sqrt(mean((test_set$Book.Rating - test_set$MF_pred)^2))
print(rmse_MF) # 1.841673
```

### Collaborative filtering with matrix factorisation model - With regularisation term

```{r}
# Assess CF MF model with L2 regularisation term, using MSE & RMSE
# Calculate MSE
mse_MF_L2 <- mean((test_set$Book.Rating - test_set$MF_pred_L2)^2)
print(mse_MF_L2) # 3.303717

# Calculate RMSE
rmse_MF_L2 <- sqrt(mean((test_set$Book.Rating - test_set$MF_pred_L2)^2))
print(rmse_MF_L2) # 1.817613
```

### User-Based Collaborative filtering

```{r}
# Assess UB model predictions using MSE and RMSE
# Calculate MSE
mse_UB <- mean((test_set$Book.Rating - test_set$UB_pred)^2)
print(mse_UB) # 11.75365

# Calculate RMSE
rmse_UB <- sqrt(mean((test_set$Book.Rating - test_set$UB_pred)^2))
print(rmse_UB) # 3.42836
```

### Item-Based Collaborative filtering

### Ensemble model

```{r}
# Assess accuracy of ensemble model using MSE & RMSE
# Calculate MSE
mse_ensemble <- mean((test_set$Book.Rating - test_set$ensemble_pred)^2)
print(mse_ensemble) 

# Calculate RMSE
rmse_ensemble <- sqrt(mean((test_set$Book.Rating - test_set$ensemble_pred)^2))
print(rmse_ensemble) 
```

# Discussion

# Recommendations

# Conclusion

# References

Grus, J. (2015). Data Science from Scratch: First Principles with Python. 1st ed. O'Reilly Media.

Han, J., Kamber, M. & Pei, J. (2012). Data Mining: Concepts and Techniques, Morgan Kaufmann Publishers, San Francisco, CA, USA.
